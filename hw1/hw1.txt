HW1
#1 use opencv-2.4.11\sources\samples\cpp\calibration.cpp to calculate
calibration.o -w 8 -h 6 -s 0.000784 -o camera.yml -op -oe
 
camera_matrix: 
	: [ 	7.4348270651538439e+002	, 0.				, 3.2523695956520459e+002, 
			0.		, 7.4418771151430110e+002	, 2.1335805160529051e+002, 
			0.		, 0.				, 1. 			]
	: [ 		Fx		, 0.						, Cx, 
			0.		, Fy						, Cy, 
			0.		, 0.						, 1. ]		
distortion_coefficients: 
   data: [ 	 6.0323969192922648e-002, 
			 8.3330344399816869e-001,
			 1.7137383847322125e-003, 
			-7.6840877439422021e-003,
			-7.9623441861531026e+000 ]		
			
#2
	use opencv-2.4.11\sources\samples\cpp\calibration.cpp to undistort
			//
			Mat temp = view.clone();
			undistort(temp, view, cameraMatrix, distCoeffs);
			imshow("Image View", view);
			//
			
#3		modified from opencv-2.4.11\sources\samples\cpp\calibration.cpp
static bool runCalibration( 
					vector<vector<Point2f> > imagePoints,
                    Size imageSize, Size boardSize, Pattern patternType,
                    float squareSize, float aspectRatio,
                    int flags, Mat& cameraMatrix, Mat& distCoeffs,
                    vector<Mat>& rvecs, 
					vector<Mat>& tvecs,
                    vector<float>& reprojErrs, double& totalAvgErr)
{
    cameraMatrix = Mat::eye(3, 3, CV_64F);
    if( flags & CV_CALIB_FIX_ASPECT_RATIO )
        cameraMatrix.at<double>(0,0) = aspectRatio;

    distCoeffs = Mat::zeros(8, 1, CV_64F);

    vector<vector<Point3f> > objectPoints(1);
    calcChessboardCorners(boardSize, squareSize, objectPoints[0], patternType);

    objectPoints.resize(imagePoints.size(),objectPoints[0]);

    double rms = calibrateCamera(objectPoints, imagePoints, imageSize, cameraMatrix,distCoeffs, 
	rvecs, tvecs, flags|CV_CALIB_FIX_K4|CV_CALIB_FIX_K5);
                    ///*|CV_CALIB_FIX_K3*/|CV_CALIB_FIX_K4|CV_CALIB_FIX_K5);
					
    printf("RMS error reported by calibrateCamera: %g\n", rms);

    bool ok = checkRange(cameraMatrix) && checkRange(distCoeffs);

    totalAvgErr = computeReprojectionErrors(objectPoints, imagePoints,
                rvecs, tvecs, cameraMatrix, distCoeffs, reprojErrs);
	//add 
	objectPoints.clean;
	readRealWorldPoints(objectPoints[0]); // push real world points to  objectPoints vector
	cv::solvePnP(objectPoints, imagePoints,cameraMatrix,distCoeffs,rvecs,tvecs);			
	cv::Matx33d r;
	cv::Rodrigues(rvec,r) ;
	cv::Matx44d T;
				for(int i=0;i<3;i++)
				{
					for(int j=0;j<3;j++)
					{
						T(i,j)=r(i,j);
					}
				}
				T(0,3)=tvecs.at<double>(0);
				T(1,3)=tvecs.at<double>(1);
				T(2,3)=tvecs.at<double>(2);
				T(3,3)=1.0;
				
				//cameraMatrix is [fx,0 ,cx
				//  			   0 ,fy,cy
				//				   0 ,0 ,1]
				//
				//Let K Matrix is [fx,0 ,cx,0
				//  			   0 ,fy,cy,0
				//				   0 ,0 ,1 ,0]
				//Let T Matrix is [T(0,0),T(0,1) ,T(0,2),T(0,3)
				//  			   T(1,0),T(1,1) ,T(1,2),T(1,3)
				//				   T(2,0),T(2,1) ,T(2,2),T(2,3)
				//				   T(3,0),T(3,1) ,T(3,2),T(3,3)]
				//	Projective	Mapping Matrix or call homography matrix
				//		is P =  K*T
				//  imagePoints * P^(-1) = real world point
    return ok;
}
#4
//
//  P^(-1)*imagePoints = real world point
//inverse(P)*[xi yi 1]=[xr yr 1]
for(int i =0,i<imagePoints.size(),i++)
{
	Point2f = RealPoint;
	[RealPoint 1]=inverse(P)*[imagePoints[i] 1];
	cv::Point( RealPoint );
}

